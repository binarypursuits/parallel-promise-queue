!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,u){function i(e){try{f(r.next(e))}catch(e){u(e)}}function c(e){try{f(r.throw(e))}catch(e){u(e)}}function f(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(i,c)}f((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function c(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=t.call(e,i)}catch(e){u=[6,e],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}},u=this;Object.defineProperty(t,"__esModule",{value:!0});var i=n(1);t.execute=function(e,t,n,c){return void 0===n&&(n=1),void 0===c&&(c=!0),r(u,void 0,void 0,function(){var r,u,f;return o(this,function(o){return n<=0?[2,Promise.reject(new Error("A valid integer must be used for concurrency parameter"))]:0===(r=e.length)?[2,Promise.resolve()]:(u=new i.default(n),f=[],[2,new Promise(function(n,o){for(var i=0,a=function(a){var l=e[a];u.pushTask(function(){return t(l).then(function(e){!0===c?f[a]=e:f.push(e),++i===r&&n(f)}).catch(o)})},l=0;l<r;l++)a(l)})])})})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.running=0,this.queue=[],this.concurrency=e}return e.prototype.pushTask=function(e){this.queue.push(e),this.next()},e.prototype.next=function(){for(var e=this;this.running<this.concurrency&&this.queue.length;){this.queue.shift()().then(function(){e.running--,e.next()}),this.running++}},e}();t.default=r}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi4vcHJvbWlzZXMvc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uLi9wcm9taXNlcy9zcmMvVGFza1F1ZXVlLnRzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwidGhpcyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl90aGlzIiwiVGFza1F1ZXVlXzEiLCJleGVjdXRlIiwiaXRlbXMiLCJwcm9taXNlIiwiY29uY3VycmVuY3kiLCJzZXF1ZW50aWFsIiwiUHJvbWlzZSIsInJlamVjdCIsIkVycm9yIiwibGVuZ3RoIiwicmVzb2x2ZSIsInF1ZXVlIiwiZGVmYXVsdCIsInJlc3VsdHMiLCJjb21wbGV0ZWQiLCJpdGVtIiwicHVzaFRhc2siLCJ0aGVuIiwicmVzdWx0IiwicHVzaCIsImNhdGNoIiwiVGFza1F1ZXVlIiwicnVubmluZyIsInRhc2siLCJuZXh0Iiwic2hpZnQiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0Esb0JBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELFNBQ0Esc0JBQUFHLGVBQUFD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QixFQUNsQjFELEtBQUErQyxNQUE2QixHQUdqQy9DLEtBQUt3QyxZQUFjQSxFQW1CM0IsT0FoQldpQixFQUFBMUIsVUFBQXFCLFNBQVAsU0FBZ0JPLEdBQ1ozRCxLQUFLK0MsTUFBTVEsS0FBS0ksR0FDaEIzRCxLQUFLNEQsUUFHRkgsRUFBQTFCLFVBQUE2QixLQUFQLFdBQ0ksSUFESixJQUFBekIsRUFBQW5DLEtBQ1dBLEtBQUswRCxRQUFVMUQsS0FBS3dDLGFBQWV4QyxLQUFLK0MsTUFBTUYsUUFBUSxDQUN2QzdDLEtBQUsrQyxNQUFNYyxPQUM3QkYsR0FBT04sS0FBSyxXQUNSbEIsRUFBS3VCLFVBQ0x2QixFQUFLeUIsU0FFVDVELEtBQUswRCxZQUlqQkQsRUExQkEiLCJmaWxlIjoicHBxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgVGFza1F1ZXVlIGZyb20gJy4vVGFza1F1ZXVlJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGUgPSBhc3luYyAoXG5cdGl0ZW1zOiBBcnJheTxhbnk+LFxuXHRwcm9taXNlOiBhbnksXG5cdGNvbmN1cnJlbmN5OiBudW1iZXIgPSAxLFxuXHRzZXF1ZW50aWFsOiBCb29sZWFuID0gdHJ1ZVxuKTogUHJvbWlzZTxhbnk+ID0+IHtcblxuXHRpZiAoY29uY3VycmVuY3kgPD0gMCkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChcblx0XHRcdG5ldyBFcnJvcihcIkEgdmFsaWQgaW50ZWdlciBtdXN0IGJlIHVzZWQgZm9yIGNvbmN1cnJlbmN5IHBhcmFtZXRlclwiKVxuXHRcdCk7XG5cdH1cblxuXHRjb25zdCBsZW5ndGg6IG51bWJlciA9IGl0ZW1zLmxlbmd0aDtcblxuXHRpZiAobGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXHR9XG5cblx0Y29uc3QgcXVldWU6IFRhc2tRdWV1ZSA9IG5ldyBUYXNrUXVldWUoY29uY3VycmVuY3kpO1xuXHRjb25zdCByZXN1bHRzOiBBcnJheTxhbnk+ID0gW107XG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKFxuXG5cdFx0KHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+IHtcblxuXHRcdFx0bGV0IGNvbXBsZXRlZDogbnVtYmVyID0gMDtcblxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXG5cdFx0XHRcdGxldCBpdGVtID0gaXRlbXNbaV07XG5cblx0XHRcdFx0Y29uc3QgdGFzazogYW55ID0gZnVuY3Rpb24gdGFzaygpIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZShpdGVtKVxuXHRcdFx0XHRcdFx0LnRoZW4oXG5cdFx0XHRcdFx0XHRcdChyZXN1bHQ6IGFueSkgPT4ge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHNlcXVlbnRpYWwgPT09IHRydWUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdHNbaV0gPSByZXN1bHQ7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaChyZXN1bHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGlmICgrK2NvbXBsZXRlZCA9PT0gbGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKHJlc3VsdHMpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0LmNhdGNoKHJlamVjdCk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0cXVldWUucHVzaFRhc2sodGFzayk7XG5cblx0XHRcdH1cblxuXHRcdH0pO1xuXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFza1F1ZXVlIHtcblxuICAgIHByaXZhdGUgY29uY3VycmVuY3k6IG51bWJlcjtcbiAgICBwcml2YXRlIHJ1bm5pbmc6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBxdWV1ZTogQXJyYXk8UHJvbWlzZTxhbnk+PiA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoY29uY3VycmVuY3k6IG51bWJlcikge1xuICAgICAgICB0aGlzLmNvbmN1cnJlbmN5ID0gY29uY3VycmVuY3k7XG4gICAgfVxuXG4gICAgcHVibGljIHB1c2hUYXNrKHRhc2s6IFByb21pc2U8YW55Pik6IHZvaWQge1xuICAgICAgICB0aGlzLnF1ZXVlLnB1c2godGFzayk7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZXh0KCk6IHZvaWQge1xuICAgICAgICB3aGlsZSAodGhpcy5ydW5uaW5nIDwgdGhpcy5jb25jdXJyZW5jeSAmJiB0aGlzLnF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdGFzazogYW55ID0gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgdGFzaygpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucnVubmluZy0tO1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJ1bm5pbmcrKztcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==